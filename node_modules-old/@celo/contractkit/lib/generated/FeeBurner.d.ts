/// <reference types="node" />
import { AbiItem, Callback, CeloTxObject, Contract, EventLog } from '@celo/connect';
import { EventEmitter } from 'events';
import Web3 from 'web3';
import { ContractEvent, EventOptions } from './types';
export interface FeeBurner extends Contract {
    clone(): FeeBurner;
    methods: {
        FIXED1_UINT(): CeloTxObject<string>;
        MIN_BURN(): CeloTxObject<string>;
        currentDayLimit(arg0: string): CeloTxObject<string>;
        dailyBurnLimit(arg0: string): CeloTxObject<string>;
        initialized(): CeloTxObject<boolean>;
        isOwner(): CeloTxObject<boolean>;
        lastLimitDay(): CeloTxObject<string>;
        maxSlippage(arg0: string): CeloTxObject<string>;
        owner(): CeloTxObject<string>;
        pastBurn(arg0: string): CeloTxObject<string>;
        registry(): CeloTxObject<string>;
        renounceOwnership(): CeloTxObject<void>;
        routerAddresses(arg0: string, arg1: number | string): CeloTxObject<string>;
        setRegistry(registryAddress: string): CeloTxObject<void>;
        transferOwnership(newOwner: string): CeloTxObject<void>;
        initialize(_registryAddress: string, tokens: string[], newLimits: (number | string)[], newMaxSlippages: (number | string)[], newRouters: string[]): CeloTxObject<void>;
        getVersionNumber(): CeloTxObject<{
            0: string;
            1: string;
            2: string;
            3: string;
        }>;
        setMaxSplippage(token: string, newMax: number | string): CeloTxObject<void>;
        setDailyBurnLimit(token: string, newLimit: number | string): CeloTxObject<void>;
        setRouter(token: string, router: string): CeloTxObject<void>;
        removeRouter(token: string, router: string, index: number | string): CeloTxObject<void>;
        getRoutersForToken(token: string): CeloTxObject<string[]>;
        burnAllCelo(): CeloTxObject<void>;
        getPastBurnForToken(token: string): CeloTxObject<string>;
        dailyBurnLimitHit(token: string, amountToBurn: number | string): CeloTxObject<boolean>;
        burnSingleMentoToken(tokenAddress: string): CeloTxObject<void>;
        burnSingleNonMentoToken(tokenAddress: string): CeloTxObject<void>;
        burnMentoTokens(): CeloTxObject<void>;
        calculateMinAmount(midPriceNumerator: number | string, midPriceDenominator: number | string, tokenAddress: string, amount: number | string): CeloTxObject<string>;
        burnNonMentoTokens(): CeloTxObject<void>;
        burn(): CeloTxObject<void>;
        transfer(token: string, recipient: string, value: number | string): CeloTxObject<boolean>;
    };
    events: {
        DailyLimitHit: ContractEvent<{
            token: string;
            burning: string;
            0: string;
            1: string;
        }>;
        DailyLimitSet: ContractEvent<{
            tokenAddress: string;
            newLimit: string;
            0: string;
            1: string;
        }>;
        DailyLimitUpdated: ContractEvent<string>;
        MaxSlippageSet: ContractEvent<{
            token: string;
            maxSlippage: string;
            0: string;
            1: string;
        }>;
        OwnershipTransferred: ContractEvent<{
            previousOwner: string;
            newOwner: string;
            0: string;
            1: string;
        }>;
        ReceivedQuote: ContractEvent<{
            router: string;
            quote: string;
            0: string;
            1: string;
        }>;
        RegistrySet: ContractEvent<string>;
        RouterAddressRemoved: ContractEvent<{
            token: string;
            router: string;
            0: string;
            1: string;
        }>;
        RouterAddressSet: ContractEvent<{
            token: string;
            router: string;
            0: string;
            1: string;
        }>;
        RouterUsed: ContractEvent<string>;
        SoldAndBurnedToken: ContractEvent<{
            token: string;
            value: string;
            0: string;
            1: string;
        }>;
        allEvents: (options?: EventOptions, cb?: Callback<EventLog>) => EventEmitter;
    };
}
export declare const ABI: AbiItem[];
export declare function newFeeBurner(web3: Web3, address: string): FeeBurner;
