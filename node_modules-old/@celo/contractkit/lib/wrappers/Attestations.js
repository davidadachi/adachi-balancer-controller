"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.AttestationsWrapper = exports.AttestationState = void 0;
var base_1 = require("@celo/base");
var address_1 = require("@celo/base/lib/address");
var connect_1 = require("@celo/connect");
var bignumber_js_1 = __importDefault(require("bignumber.js"));
var BaseWrapper_1 = require("./BaseWrapper");
/**
 * Contract for managing identities
 */
var AttestationState;
(function (AttestationState) {
    AttestationState[AttestationState["None"] = 0] = "None";
    AttestationState[AttestationState["Incomplete"] = 1] = "Incomplete";
    AttestationState[AttestationState["Complete"] = 2] = "Complete";
})(AttestationState = exports.AttestationState || (exports.AttestationState = {}));
var AttestationsWrapper = /** @class */ (function (_super) {
    __extends(AttestationsWrapper, _super);
    function AttestationsWrapper(connection, contract, contracts) {
        var _this = _super.call(this, connection, contract) || this;
        _this.connection = connection;
        _this.contract = contract;
        _this.contracts = contracts;
        /**
         *  Returns the time an attestation can be completable before it is considered expired
         */
        _this.attestationExpiryBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationExpiryBlocks, undefined, BaseWrapper_1.valueToInt);
        /**
         * Returns the attestation request fee in a given currency.
         * @param address Token address.
         * @returns The fee as big number.
         */
        _this.attestationRequestFees = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.attestationRequestFees, undefined, BaseWrapper_1.valueToBigNumber);
        _this.selectIssuersWaitBlocks = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.selectIssuersWaitBlocks, undefined, BaseWrapper_1.valueToInt);
        /**
         * @notice Returns the unselected attestation request for an identifier/account pair, if any.
         * @param identifier Attestation identifier (e.g. phone hash)
         * @param account Address of the account
         */
        _this.getUnselectedRequest = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getUnselectedRequest, undefined, function (res) { return ({
            blockNumber: (0, BaseWrapper_1.valueToInt)(res[0]),
            attestationsRequested: (0, BaseWrapper_1.valueToInt)(res[1]),
            attestationRequestFeeToken: res[2],
        }); });
        /**
         * @notice Checks if attestation request is expired.
         * @param attestationRequestBlockNumber Attestation Request Block Number to be checked
         */
        _this.isAttestationExpired = function (attestationRequestBlockNumber) { return __awaiter(_this, void 0, void 0, function () {
            var attestationExpiryBlocks, blockNumber;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.attestationExpiryBlocks()];
                    case 1:
                        attestationExpiryBlocks = _a.sent();
                        return [4 /*yield*/, this.connection.getBlockNumber()];
                    case 2:
                        blockNumber = _a.sent();
                        return [2 /*return*/, blockNumber >= attestationRequestBlockNumber + attestationExpiryBlocks];
                }
            });
        }); };
        /**
         * Returns the issuers of attestations for a phoneNumber/account combo
         * @param identifier Attestation identifier (e.g. phone hash)
         * @param account Address of the account
         */
        _this.getAttestationIssuers = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationIssuers);
        /**
         * Returns the attestation state of a phone number/account/issuer tuple
         * @param identifier Attestation identifier (e.g. phone hash)
         * @param account Address of the account
         */
        _this.getAttestationState = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationState, undefined, function (state) { return ({ attestationState: (0, BaseWrapper_1.valueToInt)(state[0]) }); });
        /**
         * Returns the attestation stats of a identifer/account pair
         * @param identifier Attestation identifier (e.g. phone hash)
         * @param account Address of the account
         */
        _this.getAttestationStat = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.getAttestationStats, undefined, function (stat) { return ({ completed: (0, BaseWrapper_1.valueToInt)(stat[0]), total: (0, BaseWrapper_1.valueToInt)(stat[1]) }); });
        /**
         * Returns the attestation signer for the specified account.
         * @param account The address of token rewards are accumulated in.
         * @param account The address of the account.
         * @return The reward amount.
         */
        _this.getPendingWithdrawals = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.pendingWithdrawals, undefined, BaseWrapper_1.valueToBigNumber);
        /**
         * Allows issuers to withdraw accumulated attestation rewards
         * @param address The address of the token that will be withdrawn
         */
        _this.withdraw = (0, BaseWrapper_1.proxySend)(_this.connection, _this.contract.methods.withdraw);
        /**
         * Returns the list of accounts associated with an identifier.
         * @param identifier Attestation identifier (e.g. phone hash)
         */
        _this.lookupAccountsForIdentifier = (0, BaseWrapper_1.proxyCall)(_this.contract.methods.lookupAccountsForIdentifier);
        return _this;
    }
    /**
     * Returns the verified status of an identifier/account pair indicating whether the attestation
     * stats for a given pair are completed beyond a certain threshold of confidence (aka "verified")
     * @param identifier Attestation identifier (e.g. phone hash)
     * @param account Address of the account
     * @param numAttestationsRequired Optional number of attestations required.  Will default to
     *  hardcoded value if absent.
     * @param attestationThreshold Optional threshold for fraction attestations completed. Will
     *  default to hardcoded value if absent.
     */
    AttestationsWrapper.prototype.getVerifiedStatus = function (identifier, account, numAttestationsRequired, attestationThreshold) {
        if (numAttestationsRequired === void 0) { numAttestationsRequired = 3; }
        if (attestationThreshold === void 0) { attestationThreshold = 0.25; }
        return __awaiter(this, void 0, void 0, function () {
            var stats, numAttestationsRemaining, fractionAttestation, isVerified;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getAttestationStat(identifier, account)];
                    case 1:
                        stats = _a.sent();
                        if (!stats) {
                            return [2 /*return*/, {
                                    isVerified: false,
                                    numAttestationsRemaining: 0,
                                    total: 0,
                                    completed: 0,
                                }];
                        }
                        numAttestationsRemaining = numAttestationsRequired - stats.completed;
                        fractionAttestation = stats.total < 1 ? 0 : stats.completed / stats.total;
                        isVerified = numAttestationsRemaining <= 0 && fractionAttestation >= attestationThreshold;
                        return [2 /*return*/, {
                                isVerified: isVerified,
                                numAttestationsRemaining: numAttestationsRemaining,
                                total: stats.total,
                                completed: stats.completed,
                            }];
                }
            });
        });
    };
    /**
     * Calculates the amount of StableToken required to request Attestations
     * @param attestationsRequested  The number of attestations to request
     */
    AttestationsWrapper.prototype.getAttestationFeeRequired = function (attestationsRequested) {
        return __awaiter(this, void 0, void 0, function () {
            var contract, attestationFee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];
                    case 1:
                        contract = _a.sent();
                        return [4 /*yield*/, this.contract.methods
                                .getAttestationRequestFee(contract.address)
                                .call()];
                    case 2:
                        attestationFee = _a.sent();
                        return [2 /*return*/, new bignumber_js_1.default(attestationFee).times(attestationsRequested)];
                }
            });
        });
    };
    /**
     * Approves the necessary amount of StableToken to request Attestations
     * @param attestationsRequested The number of attestations to request
     */
    AttestationsWrapper.prototype.approveAttestationFee = function (attestationsRequested) {
        return __awaiter(this, void 0, void 0, function () {
            var tokenContract, fee;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contracts.getStableToken(base_1.StableToken.cUSD)];
                    case 1:
                        tokenContract = _a.sent();
                        return [4 /*yield*/, this.getAttestationFeeRequired(attestationsRequested)];
                    case 2:
                        fee = _a.sent();
                        return [2 /*return*/, tokenContract.approve(this.address, fee.toFixed())];
                }
            });
        });
    };
    /**
     * Returns the current configuration parameters for the contract.
     * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get
     * @return AttestationsConfig object
     */
    AttestationsWrapper.prototype.getConfig = function (tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var feeTokens, fees;
            var _a;
            var _this = this;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        feeTokens = tokens;
                        return [4 /*yield*/, Promise.all(feeTokens.map(function (token) { return __awaiter(_this, void 0, void 0, function () {
                                var fee;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.attestationRequestFees(token)];
                                        case 1:
                                            fee = _a.sent();
                                            return [2 /*return*/, { fee: fee, address: token }];
                                    }
                                });
                            }); }))];
                    case 1:
                        fees = _b.sent();
                        _a = {};
                        return [4 /*yield*/, this.attestationExpiryBlocks()];
                    case 2: return [2 /*return*/, (_a.attestationExpiryBlocks = _b.sent(),
                            _a.attestationRequestFees = fees,
                            _a)];
                }
            });
        });
    };
    /**
     * @dev Returns human readable configuration of the attestations contract
     * @param tokens List of tokens used for attestation fees. use CeloTokens.getAddresses() to get
     * @return AttestationsConfig object
     */
    AttestationsWrapper.prototype.getHumanReadableConfig = function (tokens) {
        return __awaiter(this, void 0, void 0, function () {
            var config;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getConfig(tokens)];
                    case 1:
                        config = _a.sent();
                        return [2 /*return*/, {
                                attestationRequestFees: config.attestationRequestFees,
                                attestationExpiry: (0, BaseWrapper_1.blocksToDurationString)(config.attestationExpiryBlocks),
                            }];
                }
            });
        });
    };
    /**
     * Lookup mapped wallet addresses for a given list of identifiers
     * @param identifiers Attestation identifiers (e.g. phone hashes)
     */
    AttestationsWrapper.prototype.lookupIdentifiers = function (identifiers) {
        return __awaiter(this, void 0, void 0, function () {
            var stats, matches, addresses, completed, total, result, rIndex, pIndex, pHash, numberOfMatches, matchingAddresses, mIndex, matchingAddress;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.contract.methods.batchGetAttestationStats(identifiers).call()];
                    case 1:
                        stats = _a.sent();
                        matches = stats[0].map(BaseWrapper_1.valueToInt);
                        addresses = stats[1];
                        completed = stats[2].map(BaseWrapper_1.valueToInt);
                        total = stats[3].map(BaseWrapper_1.valueToInt);
                        result = {};
                        rIndex = 0;
                        for (pIndex = 0; pIndex < identifiers.length; pIndex++) {
                            pHash = identifiers[pIndex];
                            numberOfMatches = matches[pIndex];
                            if (numberOfMatches === 0) {
                                continue;
                            }
                            matchingAddresses = {};
                            for (mIndex = 0; mIndex < numberOfMatches; mIndex++) {
                                matchingAddress = addresses[rIndex];
                                matchingAddresses[matchingAddress] = {
                                    completed: completed[rIndex],
                                    total: total[rIndex],
                                };
                                rIndex++;
                            }
                            result[pHash] = matchingAddresses;
                        }
                        return [2 /*return*/, result];
                }
            });
        });
    };
    AttestationsWrapper.prototype.revoke = function (identifer, account) {
        return __awaiter(this, void 0, void 0, function () {
            var accounts, idx;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.lookupAccountsForIdentifier(identifer)];
                    case 1:
                        accounts = _a.sent();
                        idx = accounts.findIndex(function (acc) { return (0, address_1.eqAddress)(acc, account); });
                        if (idx < 0) {
                            throw new Error("Account not found in identifier's accounts");
                        }
                        return [2 /*return*/, (0, connect_1.toTransactionObject)(this.connection, this.contract.methods.revoke(identifer, idx))];
                }
            });
        });
    };
    return AttestationsWrapper;
}(BaseWrapper_1.BaseWrapper));
exports.AttestationsWrapper = AttestationsWrapper;
//# sourceMappingURL=Attestations.js.map